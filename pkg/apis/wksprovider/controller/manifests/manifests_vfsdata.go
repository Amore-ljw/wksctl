// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Manifests statically implements the virtual filesystem provided to vfsgen.
var Manifests = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 18, 10, 22, 14, 160628962, time.UTC),
		},
		"/01_namespace.yaml": &vfsgen۰FileInfo{
			name:    "01_namespace.yaml",
			modTime: time.Date(2020, 5, 6, 16, 16, 51, 411690040, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6c\x61\x62\x65\x6c\x73\x3a\x0a\x20\x20\x20\x20\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x74\x6f\x6f\x6c\x73\x2e\x6b\x38\x73\x2e\x69\x6f\x3a\x20\x22\x31\x2e\x30\x22\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a"),
		},
		"/02_rbac.yaml": &vfsgen۰CompressedFileInfo{
			name:             "02_rbac.yaml",
			modTime:          time.Date(2020, 6, 18, 10, 38, 19, 860589361, time.UTC),
			uncompressedSize: 3905,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x73\xdb\x38\x0c\xbd\xfb\x57\x70\x92\x43\x66\x76\x46\xca\xec\x6d\x47\xb7\x6d\x0f\x3d\xf4\x96\x64\xda\x33\x44\xc1\x16\x6b\x8a\x60\x09\xd0\x4e\xfa\xeb\x3b\xa2\x2c\x47\x8a\x65\xc7\xce\x57\xdd\x93\x41\x18\x24\xde\x03\x41\xe8\x65\x59\x36\x03\x6f\xbe\x61\x60\x43\xae\x50\xa1\x04\x9d\x43\x94\x9a\x82\xf9\x05\x62\xc8\xe5\xcb\xff\x38\x37\x74\xbd\xfa\x77\xb6\x34\xae\x2a\xd4\x67\x1b\x59\x30\xdc\x90\xc5\x59\x83\x02\x15\x08\x14\x33\xa5\x1c\x34\x58\xa8\xf5\x92\x33\x4d\x4e\x02\x59\x8b\x21\x0b\x6d\x54\x88\x16\xb9\x98\x65\x0a\xbc\xf9\x12\x28\x7a\x6e\xe3\x33\xa5\xbb\x93\xf2\xfb\xac\xcb\x31\x53\x2a\x20\x53\x0c\x1a\xc7\x11\x9c\x16\x0d\xe8\xda\x38\x1c\x2f\xae\x59\x40\xe2\xc8\x57\xa1\xb7\xf4\xd0\xa0\x93\x71\x28\xa6\xf5\x0a\x43\xb9\x39\x7d\x81\x92\x7e\xad\xe1\xce\x58\x83\xe8\x7a\x3f\xce\x35\xc2\x0a\xf3\x35\x85\x25\xef\x42\x2d\x1f\xa8\x1c\xc1\x1d\x3a\x86\x28\x5b\xff\x88\xca\xd0\xf1\x18\xf8\x3c\xce\x04\x2d\x20\x08\x26\x33\xfa\xaa\x37\xfd\xf6\xff\x0a\x2d\x0a\xee\x52\xba\xb8\x78\xca\xe0\x52\x79\xaa\xf8\x1a\x57\x46\xb7\xd7\xae\x0c\xab\x80\x3f\xa3\x09\x58\xa9\x39\x05\x25\x35\xaa\xef\x5f\x6f\xd5\xe3\xe5\x2a\x21\x55\xa2\x82\xd2\x62\x6b\xa6\x9d\xe9\x90\x74\x5a\xf4\xe4\xfa\xd2\x77\x30\x0c\x39\xce\x3b\x7c\xc3\x4c\x5b\x4f\x32\x1c\x55\x9b\xb2\xe0\x6a\x7b\x83\x8c\x3a\x1c\x7b\x7b\x6f\x5b\x95\xac\xe5\x3b\x37\x8b\x06\xfc\xa1\xf4\x97\xea\xae\x46\x55\xa2\xa5\xf5\xe9\x85\xeb\xd0\xa8\x0a\xb0\x21\x97\xba\x74\x7f\xf5\x76\x20\x83\xf7\x13\xcd\x38\x38\x6b\x12\x74\x5f\x80\x57\xbd\xfe\x4f\xc6\x55\xc6\x2d\x8e\x1b\x02\xe5\x26\xb8\xb5\x6f\x70\xde\xc6\xf6\x4c\x0e\xe4\x9d\x29\xb5\x3b\x74\x0e\x8d\x1a\x8e\xe5\x0f\xd4\x92\xa6\x4d\xb7\xf3\x16\xc3\xca\x68\xfc\x5f\x6b\x8a\x4e\xb6\x9b\x2b\x9c\x43\xb4\xfd\x9a\x3d\x68\x2c\x14\x3f\xb0\x60\xf3\xca\xb2\x8c\xea\x91\x3a\xd1\x90\xbb\x33\x0d\xb2\x40\xe3\x0b\xe5\xa2\xb5\x5b\x18\x0d\x38\x58\x3c\x37\x27\xc1\x1b\xbc\x17\x74\x9c\x7a\x60\xef\xac\x8c\x2c\xd4\xf4\xce\x0a\xe7\xc6\x99\xd4\x35\x2f\x1b\x7a\x25\x91\xb0\x04\xf0\xf9\xc4\x98\xce\xfa\x6e\xf6\x16\x1c\x4e\x47\x18\x37\x0f\xc0\x12\xa2\x96\x18\x26\x63\x9e\x10\xb8\xfa\xe7\x6a\x0c\x75\xf0\x8c\x37\x0d\x3b\x49\xe0\xf1\x5d\x0f\x1e\xfb\xcb\x58\xe1\xbd\xcf\x9f\xc7\xfd\x77\x72\x3b\x4b\xcc\x27\x4a\x80\xdd\xef\xe9\x9f\x86\x77\x58\x73\x0c\xdc\x67\x07\xb9\x46\xb0\x52\xeb\x1a\xf5\x92\xf7\xf9\x8f\x93\x23\xef\x02\x6f\x9f\xcc\x3b\x93\xea\x6d\xbe\xad\xa3\xf5\x47\x81\x9c\x92\x29\x5b\xb5\x34\x9d\xfa\x40\xbe\x13\x92\xf4\xe2\xec\xe3\xe9\x4d\x2a\xc0\x57\xf1\x6b\x47\xfd\x79\xcc\xc0\xe3\x90\x6c\xfa\xcc\x13\x59\xde\x71\xbc\x57\xe7\xbd\xb9\x3e\x3c\x45\x0f\xbd\x83\x64\x1c\xc9\xad\x37\xd1\x8a\xbf\x03\x00\x00\xff\xff\x8c\x71\xb4\x7b\x41\x0f\x00\x00"),
		},
		"/03_secrets.yaml": &vfsgen۰FileInfo{
			name:    "03_secrets.yaml",
			modTime: time.Date(2020, 5, 6, 16, 16, 51, 411690040, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x53\x65\x63\x72\x65\x74\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x77\x6b\x73\x2d\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x73\x65\x63\x72\x65\x74\x73\x0a\x20\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a\x74\x79\x70\x65\x3a\x20\x4f\x70\x61\x71\x75\x65\x0a\x64\x61\x74\x61\x3a\x0a\x20\x20\x73\x73\x68\x4b\x65\x79\x3a\x20\x22\x22\x0a"),
		},
		"/04_capi_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "04_capi_controller.yaml",
			modTime:          time.Date(2020, 6, 3, 9, 33, 29, 383893033, time.UTC),
			uncompressedSize: 787,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x8f\x13\x31\x0c\x85\xef\xf3\x2b\x2c\x71\x9e\x69\x0b\x42\x42\xe1\xb4\x02\x6e\x2c\x1c\x90\xb8\xbb\x19\xb7\xb5\x9a\xc4\xc1\xf6\x2c\xf4\xdf\xa3\xb4\xc3\x30\x3d\x54\xeb\x53\x64\xe7\x7d\x79\x79\xee\xfb\xbe\xc3\xca\x3f\x49\x8d\xa5\x04\xc0\x5a\x6d\xf3\xb2\xeb\xce\x5c\xc6\x00\x9f\xa9\x26\xb9\x64\x2a\xde\x65\x72\x1c\xd1\x31\x74\x00\x05\x33\x05\x88\x58\xb9\x8f\x52\x5c\x25\x25\xd2\xb9\x6f\x15\x23\x05\xb0\x8b\x39\xe5\x0e\x20\xe1\x9e\x92\x35\xd5\x23\x9d\x55\x8a\x6d\xae\x54\x13\x47\xb4\x00\xbb\x0e\xc0\x28\x51\x74\xd1\x9b\x32\xa3\xc7\xd3\xd7\x15\xea\xb1\x09\xa7\x5c\x13\x3a\xcd\xc2\x95\xed\x56\xe9\x8e\xf1\x98\x02\xf0\xcf\x56\x2b\x97\x44\x8a\xce\x52\x16\xe9\x1b\x78\x4a\x49\x7e\x83\xc5\x13\x8d\x53\xe2\x72\x04\x29\x90\xd1\x9c\x14\x8a\x8c\x64\x1f\x41\xe9\xd7\xc4\x4a\x23\x8c\x93\xb6\x0b\x7b\x11\x37\x57\xac\x95\xcb\x71\x98\x41\x3d\xd0\xe1\x40\xd1\x03\x7c\x93\x1f\x37\x18\x2d\xf6\xce\x74\x09\x57\x5a\xaf\x92\x68\x38\x4f\x7b\xd2\x42\x4e\x36\xb0\x6c\x6e\x8f\x2d\x77\xa5\x36\x8f\xa2\x01\xbe\xfc\x61\x73\x5b\x8c\x3e\xa3\x9e\xc1\x4f\x6c\x80\x06\x08\x51\xd9\x39\x62\x02\x1c\x47\x29\x61\xb1\x71\x7d\xeb\xd3\x3c\x7c\x6a\x33\xfb\x5e\xd2\xe5\x35\x7e\x8b\x0d\xb9\x90\xda\x7f\xd4\x9c\xea\x7d\xa0\xad\x38\xe3\x91\x02\x4c\x36\x1c\xa3\xb6\x3f\x9c\x3f\x58\x8f\xea\x7c\xc0\xe8\xd6\x57\x95\x71\x13\xd3\xd4\xfe\xd5\x63\xe5\xf5\x79\xb5\x9f\xf0\xb2\x1d\xde\x0d\xef\x17\xaa\x92\xc9\xa4\x91\x56\x7b\x85\x6b\xf8\x64\x7e\xd7\x03\x88\x75\x0a\xb0\xdb\x6e\xf3\x5d\x37\x53\x16\xbd\x04\x78\xbb\x7d\xe6\xee\x6f\x00\x00\x00\xff\xff\xae\xfa\x8b\x40\x13\x03\x00\x00"),
		},
		"/04_capi_controller.yaml~": &vfsgen۰CompressedFileInfo{
			name:             "04_capi_controller.yaml~",
			modTime:          time.Date(2020, 5, 11, 9, 49, 15, 378837164, time.UTC),
			uncompressedSize: 1140,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcd\x6e\xdb\x48\x0c\xc7\xef\x7a\x0a\x02\x7b\x8d\x14\x67\x17\x0b\x2c\xe6\x16\x6c\x73\x6b\xda\x43\x8b\xde\xe9\x19\xda\x9e\x7a\x34\x9c\x92\x9c\x38\x7a\xfb\x62\x64\x55\xb1\x8b\x18\xe5\x49\x20\xc5\x1f\xff\xfc\x98\xbe\xef\x3b\x2c\xf1\x1b\x89\x46\xce\x0e\xb0\x14\xbd\x7f\x79\xe8\x8e\x31\x07\x07\x1f\xa8\x24\x9e\x46\xca\xd6\x8d\x64\x18\xd0\xd0\x75\x00\x19\x47\x72\xe0\xb1\xc4\xde\x73\x36\xe1\x94\x48\x16\xbf\x16\xf4\xe4\x40\x27\x35\x1a\x3b\x80\x84\x5b\x4a\xda\xb2\x6e\xe5\x69\x21\xdf\xe2\x42\x25\x45\x8f\xea\xe0\xa1\x03\x50\x4a\xe4\x8d\xe5\x9c\x39\xa2\xf9\xc3\xc7\x0b\xd4\x6d\x11\x46\x63\x49\x68\xb4\x24\x5e\xc8\x6e\x96\xae\x18\xb7\x29\x00\xbf\x64\x35\x33\x4e\x24\x68\x91\xf3\x9a\xfa\x17\x3c\xa6\xc4\x27\x50\x7f\xa0\x50\x53\xcc\x7b\xe0\x0c\x23\xaa\x91\x40\xe6\x40\x3a\xc0\xd7\x43\x54\x88\x0a\x42\x3f\x6a\x14\x0a\xb0\x25\x8f\x55\x09\x42\x95\x98\xf7\x2b\x69\xcb\x6c\x6a\x82\xa5\xcc\x98\x1d\xd8\x81\xc0\xa7\xda\x58\x77\x70\x22\x18\x71\x82\x98\xa3\x45\x4c\x69\x82\x03\xbe\x10\x7c\xaf\x6a\xc0\x99\x96\x92\x77\x2b\x0c\x73\x80\x13\xd7\x14\x1a\x25\x43\x26\x0a\x60\x0c\x61\x5e\x25\x58\x93\xf4\xd6\x69\xfb\x47\xa8\xc5\x95\x6c\x2e\x4b\xd9\xa2\xd0\x4a\x5b\x54\x40\x2d\xc3\xe2\xeb\x81\x76\x3b\xf2\xe6\xe0\x13\x7f\x39\x37\x4f\xeb\x38\x8f\x34\xb9\xb9\xfb\x5e\x38\xd1\x70\xac\x5b\x92\x4c\x46\x3a\x44\xbe\x3f\x2b\x5d\xff\xe5\xd2\x66\xca\xe2\xe0\xe9\x35\xaa\xe9\x5a\xf3\x19\xe5\x78\x16\x8a\x0a\x08\x5e\xa2\x45\x8f\x09\x30\x04\xce\x6e\x95\x31\xd7\xfa\x7f\x09\x3e\xb6\x98\x7e\xce\x69\xfa\x33\xff\xbc\x38\xa9\x39\x2f\x5b\x9b\xd7\x05\xa7\x68\x07\x68\x91\x10\xf5\x08\xcb\x1d\x57\xa5\x5d\x4d\xb0\x63\x81\x40\x23\xeb\x3b\x43\x78\x7a\x25\x5f\xed\x9d\x19\xfc\xd6\x7e\xc3\xf6\x45\x48\xb5\x0a\xb9\x77\x86\x77\x43\x70\xdb\x16\xc6\x4c\xa2\x6f\xbd\x2f\x67\x7b\x7d\xb1\xcd\xe2\x88\xfb\x59\xf6\xb0\xf7\xd2\xaa\x1e\xff\xd3\x1e\xc5\xe2\x0e\xbd\x69\x5f\x84\xc3\xfd\xb2\xd3\x1e\x4b\xbc\xfc\xbe\x78\x00\xee\x65\x33\xfc\x33\xfc\xbb\x52\x85\x94\xab\x78\xba\x78\x38\x30\x5f\x35\xa9\x5d\xf9\x00\x7c\xa9\x0e\x1e\x36\x9b\xf1\xca\x3b\xd2\xc8\x32\x39\xf8\x7b\xf3\x1c\xbb\x9f\x01\x00\x00\xff\xff\xd6\xef\xd3\x2e\x74\x04\x00\x00"),
		},
		"/04_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "04_controller.yaml",
			modTime:          time.Date(2020, 6, 2, 15, 12, 39, 48385926, time.UTC),
			uncompressedSize: 1532,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x49\x73\xdb\x3a\x0c\xbe\xfb\x57\x60\xfc\xae\x91\x97\xf7\x2e\x6f\x78\xcb\xb4\xb9\x35\xed\x4c\xd3\xe9\x1d\xa6\x90\x88\x15\xb7\x02\x90\x15\xfd\xfb\x0e\x65\x45\xb6\x3b\x4e\x9c\x56\x37\x61\xf9\x16\x90\x60\x55\x55\x0b\xcc\xee\x3b\xb1\xb8\x14\x0d\x60\xce\xb2\xde\x6f\x17\xad\x8b\xb5\x81\x8f\x94\x7d\x1a\x02\x45\x5d\x04\x52\xac\x51\xd1\x2c\x00\x22\x06\x32\xd0\xb7\x52\xd9\x14\x95\x93\xf7\xc4\x53\x58\x32\x5a\x32\x20\x83\x28\x85\x05\x80\xc7\x1d\x79\x29\x4d\xaf\xb6\x01\x4c\xbf\x55\xf6\x18\xdf\xac\xf0\xc4\x95\xa6\xe4\x65\xd5\xfe\x2f\x2b\x97\x0c\x2c\xb7\xab\xcd\x72\x21\x99\x6c\xe1\x60\xca\xde\x59\x14\x03\xdb\x05\x80\x90\x27\xab\x89\x0f\xec\x01\xd5\x36\x9f\x4e\xe4\xbc\x2a\x48\x29\x64\x8f\x4a\x53\xdf\x89\xf1\xf2\xf9\x33\x88\x37\x5c\xbd\xcf\xd9\x3b\xdc\x95\x92\x17\x87\x23\x63\xaa\xe9\xe1\xcc\xdb\x4b\xb4\xe2\xe4\x69\xd5\x76\x3b\xe2\x48\x4a\x05\x64\x1d\x50\x94\xd8\xc0\x72\x39\x95\x6a\xf2\xc4\xa8\x2e\xc5\xd9\xc5\x3f\x70\xeb\x7d\xea\x41\x6c\x43\x75\xe7\x5d\x7c\x82\x14\xe1\xd0\x39\x02\xcb\x0a\xbe\x35\x4e\xc0\x09\x30\xfd\xec\x1c\x53\x0d\x3b\xb2\xd8\x09\x41\xdd\xb1\x8b\x4f\x33\xd2\x2e\x25\x15\x65\xcc\x79\x84\x79\x04\x6d\x08\xac\xef\x0a\xd6\x0d\xf4\x04\x01\x07\x70\xd1\xa9\x43\xef\x07\x68\x70\x4f\xf0\xa3\x13\x85\x14\x69\xa2\xbc\x99\xc1\x30\xd6\xd0\xa7\xce\xd7\x05\x25\x42\x24\xaa\x41\x13\xd4\xe3\xbd\x04\x2d\x92\x8e\xc3\x2b\x35\x4c\x25\x2f\xa4\x23\x2d\x45\x75\x4c\x33\xda\xa4\x02\xba\xbc\x9a\x62\x15\xd0\xe3\x23\x59\x35\xf0\x39\x3d\x1c\xcc\xd3\x3c\xd1\x96\x06\x73\x65\xac\x73\x6d\xca\x65\xa6\x89\x0d\xdc\x3d\x3b\x51\x99\x39\xef\x91\xdb\x83\x50\x14\x40\xb0\xec\xd4\x59\xf4\x80\x75\x9d\xa2\x99\x65\x8c\x5c\x1f\xa6\xe4\x6d\xc9\xc9\x97\xe8\x87\xeb\xf8\xa5\xea\xe5\xdc\xa8\x9c\xda\x78\x5c\xd0\x37\xce\x36\x80\x4c\xc0\x84\xf5\x30\x0e\x92\x09\x6d\x83\x3b\x4f\xe6\x82\xfb\xbb\x67\xb2\x9d\x5e\x30\xbf\x42\x9f\x1b\xfc\xcd\x7d\x4c\xfa\xb5\xe0\x5e\xd3\xf7\xf7\x0c\x5d\x9c\xe5\x5e\x23\x29\x37\x00\x5d\x24\x96\xa3\xb1\xc3\x56\x5e\xd8\x35\x17\xf0\x89\x0c\xd4\xc9\xb6\xc4\x85\xa8\x27\xdc\x53\x9f\xb8\x95\x75\xdf\x8a\x55\x7f\xb2\xa1\xa6\x3c\x03\xa2\x27\x8b\x1a\x02\xc6\xfa\xb8\x74\x15\xac\x77\x2e\xae\x2f\xf0\x54\x50\x55\x7b\xe2\x5d\x92\xa3\x7e\x26\x49\x1d\x5b\x3a\x79\x3d\x00\xbc\x0b\x4e\xcf\x22\x00\x36\x77\x06\xb6\x9b\x4d\x38\x8b\x06\x0a\x89\x07\x03\xff\x6d\xee\xdd\x49\xa2\x2c\x24\xc9\x9f\x41\xfc\x5b\x20\x7e\x05\x00\x00\xff\xff\x51\x54\xb6\xf7\xfc\x05\x00\x00"),
		},
		"/05_sealed_secret_crd.yaml": &vfsgen۰CompressedFileInfo{
			name:             "05_sealed_secret_crd.yaml",
			modTime:          time.Date(2020, 5, 6, 16, 16, 51, 411690040, time.UTC),
			uncompressedSize: 302,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd0\xbd\x4e\xc5\x30\x0c\x05\xe0\x3d\x4f\xe1\x17\x68\x51\x37\x94\x15\x36\x10\x03\x57\x62\xf7\x4d\x0f\x17\xab\xf9\x53\xec\x54\x3c\x3e\x6a\x2a\x24\x7e\xc6\xe4\xb3\xcf\x91\x3c\x4d\x93\xe3\x2a\x6f\x68\x2a\x25\x7b\xe2\x2a\xf8\x34\xe4\xe3\xa5\xf3\x76\xaf\xb3\x94\xbb\x7d\xb9\xc2\x78\x71\x9b\xe4\xd5\xd3\x43\x57\x2b\xe9\x15\x5a\x7a\x0b\x78\xc4\xbb\x64\x31\x29\xd9\x25\x18\xaf\x6c\xec\x1d\x51\xe6\x04\x4f\x0a\x8e\x58\x15\xa1\xc1\x74\xbe\x8a\x65\x4e\x32\x87\x92\x9c\x56\x84\x63\xee\xd6\x4a\xaf\x9e\x7e\xd2\xb9\xac\x87\x12\x9d\x95\x97\x91\x73\x19\x39\xe3\x3b\x8a\xda\xd3\x3f\x7a\x16\x3d\xb9\xc6\xde\x38\xfe\xe9\x1f\xa2\x92\x6f\x3d\x72\xfb\x6d\x8e\x48\x43\xa9\xf0\xf4\x72\x54\x57\x0e\x58\x1d\xd1\xfe\x7d\x95\x7d\xe1\x58\x3f\x78\xf9\x0a\x00\x00\xff\xff\x7b\xe7\x31\x16\x2e\x01\x00\x00"),
		},
		"/06_sealed_secret_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "06_sealed_secret_controller.yaml",
			modTime:          time.Date(2020, 5, 7, 9, 16, 32, 49753575, time.UTC),
			uncompressedSize: 4505,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5d\x53\x5b\x37\x10\x7d\xf7\xaf\xd8\x49\xa7\x93\x97\x5c\x83\x9b\xd2\x61\xf4\x46\x49\x4b\x3b\x93\x52\x0f\x94\xbe\x74\xfa\x20\x4b\x6b\x5b\x41\x5f\x91\x56\x86\x9b\x4e\xff\x7b\x47\xf2\xf5\xfd\x00\x3b\x35\x90\x0c\xf8\xe9\xb2\x5a\xed\x9e\x3d\x3a\x5a\x2d\x55\x55\x8d\xb8\x57\x7f\x62\x88\xca\x59\x06\xab\xc9\xe8\x5a\x59\xc9\xe0\x12\xc3\x4a\x09\x1c\x19\x24\x2e\x39\x71\x36\x02\xe0\xd6\x3a\xe2\xa4\x9c\x8d\x0c\xfe\xf9\x77\x04\xa0\xf9\x0c\x75\xcc\x6b\x00\x96\x1b\x64\x10\x91\x6b\x94\x55\x44\x11\x90\x62\x25\x9c\xa5\xe0\xb4\xc6\x30\xda\xd7\x23\x7a\x2e\x90\xc1\x75\x9a\x61\x15\xeb\x48\x68\x46\xd1\xa3\xc8\x49\xbc\x0b\x54\xb2\x55\xe5\x93\xc1\xf1\xe1\xf1\x61\x49\x4e\x3c\x2c\x90\xa6\x7d\x63\x44\x8d\x82\x5c\xd8\x17\x1d\xd5\x1e\x19\x9c\xea\x14\x09\xc3\xaf\xd3\xd1\x5d\x6a\xc2\x8c\x8b\x31\x4f\xb4\x74\x41\x7d\x2a\x2c\x8c\xaf\x8f\xe3\x58\xb9\x83\x96\xb4\x0b\xa7\xf1\x47\x65\xa5\xb2\x8b\xa7\x12\x17\xd7\xfc\x57\x3e\xb8\x5b\xb5\x9b\xbd\xed\x6e\x5b\x28\x0c\x4e\xe3\x05\xce\x0b\x1a\xaf\xce\x82\x4b\xfe\x33\x25\x8d\x00\xba\x8a\xf6\xcd\x1d\xd3\xec\x03\x8a\x7c\x40\xd5\x83\x72\x14\xc7\x2e\x49\xc1\xcb\xf2\x0e\xb4\xa4\x04\x27\x94\xf7\xce\x82\x7b\x1f\x3b\xda\xdf\xa1\xd7\xae\x36\x68\xe9\x65\xc9\xd5\x28\x7b\x81\x5c\xd6\x97\x28\x9c\x95\x91\xc1\xdb\xac\xcb\x80\x5e\x2b\xc1\x23\x83\x49\xf9\x6b\xa5\x72\x4d\xbf\xa8\x48\x2e\xd4\xef\x95\x51\xc4\x60\x72\x5f\xc0\x86\x93\x58\xbe\xef\x15\xb0\x0f\xc0\x48\x81\x13\x2e\xea\xf5\x8e\x6c\x56\x76\x71\xe5\x25\x27\xdc\x04\x31\xfc\xf6\x32\x85\x05\x32\xf8\xee\xe8\xdb\xce\x76\x65\xf9\x8a\x2b\xcd\x67\xba\xb7\xb2\xbe\x22\x17\xfd\x30\xf9\xe2\xa0\xf1\xba\x8d\xd8\x3f\x81\xfc\xbb\x7f\x0a\xf9\xa7\x07\x85\xec\x53\x0a\xc0\x86\xd6\x82\xc4\x69\x0c\x4d\xd4\xc6\xf4\x0d\x9c\x68\xed\x6e\x20\x8a\x25\xca\x94\x11\x82\xb3\x60\x78\xbe\xce\x60\x9d\xc4\x38\x86\x3f\x96\x2a\x82\x8a\x10\xf0\x63\x52\x01\x25\xcc\x50\xf0\x14\x11\x64\x0a\xf9\xd2\x6e\x22\xcd\x9c\xa3\xcc\x9d\xf7\x25\xcc\x1c\x68\x89\x20\xd6\xad\xe1\x0d\xdc\x20\x18\x5e\x83\xb2\x8a\x14\xd7\xba\x86\x25\x5f\x21\x7c\x48\x91\xc0\x59\x6c\x52\xbe\x69\x83\x71\x2b\xe1\xc6\x25\x2d\x73\x14\x0b\x16\x51\x02\x39\x90\x45\xb5\x40\x19\x52\x57\x69\xf6\x09\x98\xd7\x23\x52\x49\x9b\x6f\x41\xc0\x36\x5a\x83\x02\x92\x1f\x37\xb6\x0a\x70\x3e\x47\x41\x0c\xce\xdd\xe5\xba\x78\x6c\x89\xbd\xc6\x9a\x95\xea\xab\xdc\x01\xc6\x59\xa6\xc1\x22\x61\x69\x5c\x6b\xa4\xad\xaf\xf3\x99\x53\x17\x18\xfc\x74\xab\x22\xc5\x66\x21\x83\xe3\xca\x62\x68\xa9\xae\x80\x87\x45\x64\xf0\xd7\xdf\xed\x5e\xe1\x8c\xe1\x56\x76\x27\x5a\xc1\x9d\xe3\xcb\x3f\xb4\xab\xc1\x2e\x65\x78\x56\xde\xc7\xc4\xeb\x8c\x67\xa6\xc8\x72\xa3\x0e\x76\xea\x80\xad\x0e\xc7\x93\xc9\xf8\x70\x18\x60\x9a\xb4\x9e\x3a\xad\x44\xcd\xe0\x44\xdf\xf0\x3a\xb6\xeb\x5a\xad\xd0\x62\x8c\xd3\xe0\x66\xd8\x81\x03\x58\x12\xf9\x33\xa4\xbe\x09\xc0\x73\x5a\x32\x38\x58\x22\xd7\xb4\xfc\x34\x5c\x2a\x4f\x4b\xde\xf5\x20\xcd\x6e\xb6\xc6\xbb\xc4\x14\x42\xa7\xc3\x47\xac\x1f\x76\x90\x29\x20\x97\xea\x6b\x95\x11\x51\xa4\xa0\xa8\x3e\x75\x96\xf0\x76\x10\x2a\xe7\xfd\xdd\xea\xfa\xc2\x39\xfa\x59\x69\x6c\x7a\x33\x50\x48\xd8\x77\x4b\xf6\x24\x9e\x3b\x9b\xdd\xb6\x2f\x5e\x45\x0c\xb9\xab\x1d\x4e\xba\xb4\x24\x95\x65\x30\xe7\x3a\x76\xee\x44\xf5\x5d\xd3\xca\xe9\x64\xf0\x37\x97\xec\x90\x44\x93\x2d\xd3\x75\xa5\x64\xfc\x3d\x02\x3b\x5b\xab\x91\xcb\xf5\x19\xf5\x14\x98\xaf\xf0\x69\x27\xef\x6e\x61\x27\x29\xf3\xd8\xbc\x6b\x3f\x1c\x1d\xbd\xfd\xbe\xf5\x2e\x2f\xe1\x89\x10\x19\xd4\xf9\x5e\xba\x20\x0c\x46\xd9\xd2\xc2\xce\x02\x17\x38\xc5\xa0\x9c\x1c\x3e\x15\x5d\xfd\xbd\xab\x87\xc6\x53\xfd\x4e\x85\x5e\x37\xed\xd7\xfc\xbc\x63\xcb\x97\x79\x40\xbf\xc2\xb0\x72\x8d\x75\xc5\xa5\x51\x76\x30\xa6\x0c\x66\xdd\xe6\xf8\x9e\x02\xfc\x91\xe4\x3f\x95\xf5\xae\xb8\x3d\x1d\xb6\x71\x9e\x34\x0e\x46\xb7\x66\xd0\x7e\xf5\xaa\x4c\x29\xd1\xa5\x20\xb0\xb1\x35\x61\x47\x00\x2b\x0c\xb3\xc6\x28\x02\xae\xe7\x81\x0a\xb4\x8a\xf4\x18\x2e\x9a\xe1\xfb\xb9\xf4\xf8\x48\xd9\xf5\x50\xf7\x92\xac\xa3\x27\x5b\xd2\x85\x97\xa6\xba\x3e\xe6\x87\x53\x7c\xa7\xb6\x9d\x0b\xbb\x34\xd5\xbc\xf3\x63\xe1\xcc\x36\x71\x65\x02\xb6\x4a\x6c\x81\xd4\xe9\x2b\x7f\xdc\xe4\xa1\xb8\x7c\xa5\xf5\x34\xfa\x78\xf9\x6e\x62\xf7\x64\x9c\x36\x13\x6e\x05\x12\x35\xee\x1b\x1e\x57\x68\x3f\x73\x39\x7c\xc1\xfc\x7f\xff\x78\x6f\x64\xf1\x22\xfa\xf1\x33\xb5\xb5\x2f\xfe\x3f\xf0\x3e\x2d\x2e\xbf\xde\x8d\xfd\x75\x9e\x93\xd8\xee\x61\xf4\x75\x4f\xaf\xdb\xf9\xbc\x27\xbc\x82\x34\x1e\x64\xa8\xf5\x4e\x85\x64\x29\xfe\x17\x00\x00\xff\xff\xd1\x93\xfb\x19\x99\x11\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_namespace.yaml"].(os.FileInfo),
		fs["/02_rbac.yaml"].(os.FileInfo),
		fs["/03_secrets.yaml"].(os.FileInfo),
		fs["/04_capi_controller.yaml"].(os.FileInfo),
		fs["/04_capi_controller.yaml~"].(os.FileInfo),
		fs["/04_controller.yaml"].(os.FileInfo),
		fs["/05_sealed_secret_crd.yaml"].(os.FileInfo),
		fs["/06_sealed_secret_controller.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
